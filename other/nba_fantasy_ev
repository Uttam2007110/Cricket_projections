# -*- coding: utf-8 -*-
"""
Created on Mon Feb 24 16:11:59 2025

@author: Subramanya.Ganti
"""
#%% imports
import requests
import pandas as pd
import numpy as np
import json
import re

#%% functions
def get_player_info():
    
    url = "https://nbafantasy.nba.com/api/bootstrap-static/"
    r = requests.get(url,verify=False)
    json = r.json()
    elements = pd.DataFrame(json['elements'])
    elements['name'] = elements['first_name'] + ' ' + elements['second_name']
    teams = pd.DataFrame(json['teams'])
    
    elements = elements[['code','id','name','now_cost','team','element_type']]
    teams = teams[['id','name']]
    return(elements,teams)

def get_fixture_info(player_info):
    
    fixtures = []
    
    for i in player_info['id']:
        url = "https://nbafantasy.nba.com/api/element-summary/"+str(i)+"/"
        r = requests.get(url,verify=False)
        json = r.json()
        if json == {'detail': 'Not found.'}:
            continue
        else:
            data=pd.DataFrame(json['fixtures'])
            data["id"] = i
            data=data[["team_h", "team_a", "event_name", "is_home", "id"]]
            fixtures.append(data)

    fixtures=pd.concat(fixtures)
    
    return(fixtures)

def get_player_mpg(player_info):
    
    player_info['MPG'] = 0.1
    player_info['MPG_adj'] = 0.1
    
    for i in player_info['id']:
        i = int(i)
        url = "https://nbafantasy.nba.com/api/element-summary/"+str(i)+"/"
        r = requests.get(url,verify=False)
        json = r.json()
        if json == {'detail': 'Not found.'}:
            continue
        else:
            player_data=pd.DataFrame(json['history'])
            player_data['decay'] = player_data.index
            player_data['decay'] = pow(.8,len(player_data)-player_data['decay'])
            player_data['decay'] = player_data['decay']/sum(player_data['decay'])
            player_info.loc[player_info['id']==i,'MPG_adj'] = sum(player_data['decay']*player_data['minutes'])
            
            player_data = player_data.loc[player_data['minutes']>1]
            player_data.reset_index(inplace=False)
            player_data['decay'] = player_data.index
            player_data['decay'] = pow(.8,len(player_data)-player_data['decay'])
            player_data['decay'] = player_data['decay']/sum(player_data['decay'])
            player_info.loc[player_info['id']==i,'MPG'] = sum(player_data['decay']*player_data['minutes'])
    
    player_info['DNP'] = 1-np.cos((48-player_info['MPG'])*np.pi/96)
    player_info['minutes'] = player_info['MPG_adj']*player_info['DNP'] + player_info['MPG']*(1-player_info['DNP'])
    player_info = player_info.drop(['MPG', 'MPG_adj', 'DNP'],axis=1)
    
    player_info['availability'] = 1
    player_info.loc[player_info['Status']=='Out ','availability'] = 0
    player_info.loc[player_info['Status']=='Out For The Season ','availability'] = 0
    player_info.loc[player_info['Status']=='Injured Reserve ','availability'] = 0
    player_info.loc[player_info['Status']=='Day-To-Day ','availability'] = 0.75
    player_info['minutes_GW'] = player_info['minutes']*player_info['availability']
    return(player_info)

def injury_status():
    injuries = pd.read_html('https://sports.yahoo.com/nba/injuries/')
    injuries = pd.concat(injuries)
    injuries['Player'] = injuries['Player'].str.replace('í','i')
    injuries['Player'] = injuries['Player'].str.replace('č','c')
    injuries['Player'] = injuries['Player'].str.replace('Č','C')
    injuries['Player'] = injuries['Player'].str.replace('ić','ic')
    injuries['Player'] = injuries['Player'].str.replace('ö','o')
    injuries['Player'] = injuries['Player'].str.replace('é','e')
    injuries['Player'] = injuries['Player'].str.replace('ü','u')
    injuries['Player'] = injuries['Player'].str.replace('ņ','n')
    injuries['Player'] = injuries['Player'].str.replace('ģ','g')
    injuries['Player'] = injuries['Player'].str.replace('ô','o')
    injuries['Player'] = injuries['Player'].str.replace('ū','u')
    injuries['Player'] = injuries['Player'].str.replace('Ş','S')
    injuries['Player'] = injuries['Player'].str.replace('Š','S')
    injuries['Player'] = injuries['Player'].str.replace('è','e')
    injuries['Player'] = injuries['Player'].str.replace('Alex Sarr','Alexandre Sarr')
    injuries['Player'] = injuries['Player'].str.replace('P.J. Washington Jr.','P.J. Washington')
    injuries['Player'] = injuries['Player'].str.replace('Jimmy Butler III','Jimmy Butler')
    injuries['Player'] = injuries['Player'].str.replace('GG Jackson II','GG Jackson')
    injuries['Player'] = injuries['Player'].str.replace('Xavier Tillman Sr.','Xavier Tillman')
    injuries['Player'] = injuries['Player'].str.replace('Jeff Dowtin Jr.','Jeff Dowtin')
    injuries['Player'] = injuries['Player'].str.replace('Craig Porter Jr.','Craig Porter')
    injuries['Player'] = injuries['Player'].str.replace('Ron Holland II','Ronald Holland II')
    injuries['Player'] = injuries['Player'].str.replace('Tolu Smith III','Tolu Smith')
    injuries['Player'] = injuries['Player'].str.replace('Trey Jemison III','Trey Jemison')
    injuries['Player'] = injuries['Player'].str.replace('AJ Green','A.J. Green')
    injuries['Player'] = injuries['Player'].str.replace('KJ Simpson','K.J. Simpson')
    injuries['Player'] = injuries['Player'].str.replace('KJ Martin','Kenyon Martin Jr.')
    injuries['Player'] = injuries['Player'].str.replace('Nate Williams','Jeenathan Williams')
    return injuries

def yahoo_player_list():
    teams= ['boston','brooklyn','new-york','philadelphia','toronto',
            'chicago','cleveland','detroit','indiana','milwaukee',
            'atlanta','charlotte','miami','orlando','washington',
            'golden-state','la-clippers','la-lakers','phoenix','sacramento',
            'dallas','houston','memphis','new-orleans','san-antonio',
            'denver','minnesota','oklahoma-city','portland','utah']
    
    player_list = []
    for n in teams:
        team_n = pd.read_html(f'https://sports.yahoo.com/nba/teams/{n}/roster/')
        team_n = team_n[0]    
        player_list.append(team_n)
        
    player_list = pd.concat(player_list)
    player_list['Player'] = player_list['Player'].str.replace('í','i')
    player_list['Player'] = player_list['Player'].str.replace('č','c')
    player_list['Player'] = player_list['Player'].str.replace('Č','C')
    player_list['Player'] = player_list['Player'].str.replace('ić','ic')
    player_list['Player'] = player_list['Player'].str.replace('ö','o')
    player_list['Player'] = player_list['Player'].str.replace('é','e')
    player_list['Player'] = player_list['Player'].str.replace('ü','u')
    player_list['Player'] = player_list['Player'].str.replace('ņ','n')
    player_list['Player'] = player_list['Player'].str.replace('ģ','g')
    player_list['Player'] = player_list['Player'].str.replace('Alex Sarr','Alexandre Sarr')
    player_list['Player'] = player_list['Player'].str.replace('P.J. Washington Jr.','P.J. Washington')
    player_list['Player'] = player_list['Player'].str.replace('Jimmy Butler III','Jimmy Butler')
    player_list['Player'] = player_list['Player'].str.replace('GG Jackson II','GG Jackson')  
    player_list['Player'] = player_list['Player'].str.replace('Xavier Tillman Sr.','Xavier Tillman')
    player_list['Player'] = player_list['Player'].str.replace('Jeff Dowtin Jr.','Jeff Dowtin')
    player_list['Player'] = player_list['Player'].str.replace('Craig Porter Jr.','Craig Porter')
    player_list['Player'] = player_list['Player'].str.replace('Ron Holland II','Ronald Holland II')
    player_list['Player'] = player_list['Player'].str.replace('Tolu Smith III','Tolu Smith')
    player_list['Player'] = player_list['Player'].str.replace('Trey Jemison III','Trey Jemison')
    player_list['Player'] = player_list['Player'].str.replace('AJ Green','A.J. Green')
    player_list['Player'] = player_list['Player'].str.replace('KJ Simpson','K.J. Simpson')
    player_list['Player'] = player_list['Player'].str.replace('KJ Martin','Kenyon Martin Jr.')
    player_list['Player'] = player_list['Player'].str.replace('Nate Williams','Jeenathan Williams')
    player_list['Player'] = player_list['Player'].str.replace('ô','o')
    player_list['Player'] = player_list['Player'].str.replace('ū','u')
    player_list['Player'] = player_list['Player'].str.replace('Ş','S')
    player_list['Player'] = player_list['Player'].str.replace('Š','S')
    player_list['Player'] = player_list['Player'].str.replace('è','e')
    return player_list

def adjust_mins_by_team(data):
    results = []
    data['minutes_GW'] = data['minutes']*data['availability']
    for t in data['team'].unique():
        subset = data[data['team']==t]
        subset['rank'] = subset['minutes_GW'].rank(ascending=False)
        decay = 1
        while(subset['minutes_GW'].sum()>240.1 or subset['minutes_GW'].sum()<239.9):
            subset['minutes_GW'] *= pow(decay,subset['rank'])
            if(subset['minutes_GW'].sum()>240): decay -= 0.0001
            else:  decay += 0.0001
        results.append(subset)

    results = pd.concat(results)
    return results

#%% player names
players,team_id = get_player_info()
players = players.loc[players['code']>1]
players = players.sort_values(['now_cost', 'team'], ascending=[False, True])

#%% fixtures by team
team_list = players.groupby('team').first()
team_list = team_list.reset_index()
fixtures = get_fixture_info(team_list)

fixtures['h_copy'] = fixtures['team_h']
fixtures['a_copy'] = fixtures['team_a']
fixtures = fixtures.drop('id',axis=1)
fixtures['event_name'] = fixtures['event_name'].str.replace('Gameweek ', 'GD_')
fixtures['event_name'] = fixtures['event_name'].str.replace(" - Day ", "_")

for f in fixtures.values:
    if(f[3]==False):
        #print(f[0],f[1],f[3])
        #h = f[0]; a = f[1]
        fixtures.loc[(fixtures['h_copy']==f[4])&(fixtures['a_copy']==f[5])&(fixtures['event_name']==f[2])&(fixtures['is_home']==f[3]),'team_h'] = f[5]
        fixtures.loc[(fixtures['h_copy']==f[4])&(fixtures['a_copy']==f[5])&(fixtures['event_name']==f[2])&(fixtures['is_home']==f[3]),'team_a'] = f[4]
        
fixtures_pivot = pd.pivot_table(fixtures,values='team_a',columns=['event_name'],index='team_h',aggfunc='count')
fixtures_pivot = fixtures_pivot.fillna(0)

#%% injury information
player_list = yahoo_player_list()
players = pd.merge(players, player_list, left_on = ['name'], right_on=['Player'], how = 'outer')
unmapped_injured_players = players.loc[players['name'].isna(),'Player']
print('Players not yet added to the official fantasy game who are on a roster')
for x in unmapped_injured_players: print(x)
players = players[players['name'].notna()]
players = players[['code', 'id', 'name', 'now_cost', 'team', 'element_type']]
del player_list

injuries = injury_status()
players = pd.merge(players, injuries, left_on = ['name'], right_on=['Player'], how = 'outer')
players[['Status', 'Injury']] = players['Status'].str.split('(', n=1, expand=True)
players['Injury'] = players['Injury'].str.replace(')','')
unmapped_injured_players = players.loc[players['name'].isna(),'Player']
print('Players on the injury report who are not mapped on the player list')
for x in unmapped_injured_players: print(x)
players = players[players['name'].notna()]
players = players.drop(['Player','Pos','Date'],axis=1)


#%% mintues adjustment
mins_adj = get_player_mpg(players[(players['team']==8)|(players['team']==12)])
mins_adj = adjust_mins_by_team(mins_adj)
